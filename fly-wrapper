#!/usr/bin/env bash

set -euo pipefail


declare -r DOMAIN="caascad.com"
declare -r FLYRC_PATH="${HOME}/.flyrc"
declare -r TARGET_PATH="${HOME}/.fly-current-target"


function usage() {
  cat >&2 <<EOF
Usage: fly switch [switch-options]

Help Options:

  -h          Show this help message

[switch command options]
  -z VALUE    Name of the zone
  -n VALUE    Team to authenticate with
  -c          Use the client's instance
EOF
}

function list_targets() {
  if [[ -f "$FLYRC_PATH" ]]; then
    yq -r --arg target infra-stg '.targets | keys[]' "$FLYRC_PATH"
  fi
}

function target_exists() {
  local name="$1"
  list_targets | grep -q "^${name}$"
}

function current_team() {
  local target="$1"
  if [[ -f "$FLYRC_PATH" ]]; then
    yq -r --arg target "$target" '.targets[$target].team' "$FLYRC_PATH"
  fi
}

function config_target() {
  local target="$1"
  local team="$2"
  local url="$3"
  if [[ -f "$FLYRC_PATH" ]]; then
    cur_flyrc="$(cat $FLYRC_PATH)"
  else
    cur_flyrc="targets:"
  fi
  content=$(yq -y --arg target "$target" --arg team "$team" --arg url "$url" '.targets[$target] += {team: $team, api: $url}' <<< "$cur_flyrc")
  echo -n "$content" > "$FLYRC_PATH"
}

function target_name() {
  local zone="$1"
  local kind="$2"
  echo -n "${zone}.${kind}"
}

function build_url() {
  local zone="$1"
  local kind="$2"
  local fqdn="ci-infra"
  [[ "$kind" == "client" ]] && fqdn="ci"
  echo -n "https://${fqdn}.${zone}.${DOMAIN}"
}

function current_target() {
  if [[ -f "$TARGET_PATH" ]]; then
    cat "$TARGET_PATH"
  fi
}

function config_team() {
  local target="$1"
  local team="$2"
  if ! [[ -f "$FLYRC_PATH" ]]; then
    echo >&2 "Cannot change the team: $FLYRC_PATH not found"
  fi

  content=$(yq -y --arg target "$target" --arg team "$team" '.targets[$target].team = $team' "$FLYRC_PATH")
  echo -n "$content" > "$FLYRC_PATH"
}

function show_config() {
  local target="$(current_target)"
  local team=$(current_team "$target")
  if [[ -n "$target" ]] && [[ -n "$team" ]]; then
    echo "Current target is $target using team $team"
  else
    echo "No target has been found."
    exit 1
  fi
}

function fly_switch() {
  # `fly switch` subcommand does not support autocompletion
  if [[ -n "${GO_FLAGS_COMPLETION:-}" ]]; then
    exit 0
  fi

  local opt_zone=""
  local opt_team=""
  local opt_kind="infra"

  while getopts ":z:n:ch" option; do
      case "$option" in
          z) opt_zone="$OPTARG";;
          n) opt_team="$OPTARG";;
          c) opt_kind="client";;
          h) usage; exit 0;;
          *) usage; exit 1;;
      esac
  done
  shift $((OPTIND-1))

  # The -z and -n are provided => change user zone and set team
  if [[ -n "$opt_zone" ]]; then
    echo "Asking for changing zone..."

    if [[ -n "$opt_team" ]]; then
      local target=$(target_name $opt_zone $opt_kind)
      local url=$(build_url $opt_zone $opt_kind)
      config_target "$target" "$opt_team" "$url"
      echo "$target" > "$TARGET_PATH"
    else
      echo "You need to specify a team"
      exit 1
    fi

  # Only -n is provided => change user team
  elif [[ -n "$opt_team" ]]; then
    local target="$(current_target)"

    if [[ -z "$target" ]]; then
      echo "You should provide a target. See '$0 switch -h'"
      exit 1
    fi

    if ! target_exists $target; then
      echo "Current target does not exist"
      exit 1
    fi

    config_team "$target" "$opt_team"
  fi

  show_config
}

function main() {
  if [[ "$#" -ge 1 ]] && [[ "$1" == "switch" ]]; then
    shift 1
    fly_switch $@
    exit 0
  fi

  local isTargetProvided=false
  for arg in "$@"; do
    case "$arg" in
      -t | --target) isTargetProvided=true;;
    esac
  done

  local args
  if ! $isTargetProvided && [[ -n "$(current_target)" ]]; then
    args=( -t "$(current_target)" "$@" )
  else
    args=( "$@" )
  fi

  fly "${args[@]}"
}

main "$@"
